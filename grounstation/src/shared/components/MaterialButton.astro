---
interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  icon?: string;
  disabled?: boolean;
  loading?: boolean;
  type?: 'button' | 'submit' | 'reset';
  onClick?: string;
  class?: string;
}

const {
  variant = 'primary',
  size = 'md',
  icon,
  disabled = false,
  loading = false,
  type = 'button',
  onClick,
  class: className = ''
} = Astro.props;

const sizeClasses = {
  sm: 'px-3 py-1.5 text-xs',
  md: 'px-4 py-2 text-sm',
  lg: 'px-6 py-3 text-base'
};

const variantClasses = {
  primary: 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500',
  secondary: 'bg-gray-100 text-gray-900 hover:bg-gray-200 focus:ring-gray-500',
  outline: 'border border-gray-300 text-gray-700 hover:bg-gray-50 focus:ring-gray-500',
  ghost: 'text-gray-600 hover:bg-gray-100 focus:ring-gray-500'
};
---

<button
  type={type}
  disabled={disabled || loading}
  onclick={onClick}
  data-action={Astro.props['data-action']}
  data-player-id={Astro.props['data-player-id']}
  class={`
    material-button
    ${sizeClasses[size]}
    ${variantClasses[variant]}
    ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
    ${className}
  `}
>
  {loading && (
    <span class="material-symbols-outlined animate-spin mr-2 text-lg">
      progress_activity
    </span>
  )}
  
  {icon && !loading && (
    <span class="material-symbols-outlined mr-2 text-lg">
      {icon}
    </span>
  )}
  
  <slot />
</button>