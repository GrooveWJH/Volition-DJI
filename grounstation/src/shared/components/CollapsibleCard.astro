---
interface Props {
  title: string;
  description?: string;
  icon?: string;
  statusText?: string;
  statusType?: 'success' | 'warning' | 'error' | 'info';
  collapsed?: boolean;
  id: string;
}

const {
  title,
  description,
  icon = "widgets",
  statusText,
  statusType = "info",
  collapsed = false,
  id,
} = Astro.props;

const statusClasses = {
  success: "status-success",
  warning: "status-warning", 
  error: "status-error",
  info: "status-info"
};
---

<div class="material-card">
  <!-- Collapsible Header -->
  <div 
    class="px-6 py-4 border-b border-gray-200 cursor-pointer hover:bg-gray-50 transition-colors"
    onclick={`toggleCard('${id}')`}
    id={`${id}-header`}
  >
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-3">
        <span class="material-symbols-outlined text-blue-600 text-2xl">
          {icon}
        </span>
        <div>
          <h3 class="text-lg font-semibold text-gray-900">{title}</h3>
          {description && (
            <p class="text-sm text-gray-600 mt-1">{description}</p>
          )}
        </div>
        {statusText && (
          <div class={`status-indicator ${statusClasses[statusType]}`}>
            <span class="material-symbols-outlined text-sm mr-1">
              {statusType === 'success' ? 'check_circle' : 
               statusType === 'warning' ? 'warning' :
               statusType === 'error' ? 'error' : 'info'}
            </span>
            {statusText}
          </div>
        )}
      </div>
      <span 
        class="material-symbols-outlined text-gray-400 transition-transform duration-200" 
        id={`${id}-toggle-icon`}
        style={collapsed ? "transform: rotate(0deg)" : "transform: rotate(180deg)"}
      >
        expand_more
      </span>
    </div>
  </div>
  
  <!-- Collapsible Content -->
  <div
    class={`px-6 pb-6 pt-4 transition-all duration-200 ${collapsed ? 'hidden' : ''}`}
    id={`${id}-content`}
  >
    <slot />
  </div>
</div>

<script define:vars={{ id, collapsed }} is:inline>
  // Make toggle function globally available
  if (typeof window !== 'undefined') {
    window.toggleCard = window.toggleCard || function(cardId) {
      const content = document.getElementById(`${cardId}-content`);
      const header = document.getElementById(`${cardId}-header`);
      const icon = document.getElementById(`${cardId}-toggle-icon`);

      if (!content || !header || !icon) {
        console.warn(`Card elements missing for ${cardId}`);
        return;
      }
      
      if (content.classList.contains('hidden')) {
        content.classList.remove('hidden');
        header.classList.add('bg-gray-50');
        icon.style.transform = 'rotate(180deg)';
      } else {
        content.classList.add('hidden');
        header.classList.remove('bg-gray-50');
        icon.style.transform = 'rotate(0deg)';
      }
    };
  }
</script>

<style>
  .material-card {
    @apply bg-white rounded-lg shadow-material border border-gray-200;
  }
  
  .status-indicator {
    @apply px-3 py-1 rounded-full text-xs font-medium inline-flex items-center;
  }
  
  .status-success {
    @apply bg-green-100 text-green-800;
  }
  
  .status-warning {
    @apply bg-yellow-100 text-yellow-800;
  }
  
  .status-error {
    @apply bg-red-100 text-red-800;
  }
  
  .status-info {
    @apply bg-blue-100 text-blue-800;
  }
</style>