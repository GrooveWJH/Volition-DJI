---
// 设备切换器
---

<link rel="stylesheet" href="/node_modules/tippy.js/dist/tippy.css">

<div id="device-switcher" class="device-switcher device-switcher-container">
  <div id="device-list" class="device-list"></div>
  <button id="refresh-btn" class="device-refresh-btn" title="刷新">
    <span class="material-symbols-outlined">refresh</span>
  </button>
  <button id="settings-btn" class="device-settings-btn" title="设置">
    <span class="material-symbols-outlined">settings</span>
  </button>
</div>

<!-- 设置面板 -->
<div id="settings-panel" class="settings-panel hidden">
  <div class="settings-card-wide">
    <div class="settings-header">
      <h3>系统配置</h3>
      <button id="close-settings" class="close-btn">
        <span class="material-symbols-outlined">close</span>
      </button>
    </div>
    <div class="settings-body">
      <!-- 两列布局 -->
      <div class="grid grid-cols-2 gap-6">
        <!-- 左列：EMQX/MQTT 配置 -->
        <div class="config-column">
          <h4 class="text-sm font-semibold text-gray-700 mb-3 flex items-center gap-2">
            <span class="material-symbols-outlined text-lg">dns</span>
            EMQX 服务器配置
          </h4>
          <div class="space-y-3">
            <div class="form-group">
              <label>服务器地址</label>
              <input type="text" id="input-host" placeholder="192.168.31.116" />
            </div>
            <div class="grid grid-cols-2 gap-3">
              <div class="form-group">
                <label>API 端口</label>
                <input type="text" id="input-port" placeholder="18083" />
              </div>
              <div class="form-group">
                <label>WS 端口</label>
                <input type="text" id="input-mqtt-port" placeholder="8083" />
              </div>
            </div>
            <div class="form-group">
              <label>API Key</label>
              <input type="text" id="input-key" placeholder="API Key" />
            </div>
            <div class="form-group">
              <label>Secret Key</label>
              <input type="password" id="input-secret" placeholder="Secret Key" />
            </div>
            <div class="grid grid-cols-2 gap-3">
              <div class="form-group">
                <label>MQTT 用户名</label>
                <input type="text" id="input-mqtt-username" placeholder="admin" />
              </div>
              <div class="form-group">
                <label>MQTT 密码</label>
                <input type="password" id="input-mqtt-password" placeholder="public" />
              </div>
            </div>
          </div>
        </div>

        <!-- 右列：视频推流配置 -->
        <div class="config-column">
          <h4 class="text-sm font-semibold text-gray-700 mb-3 flex items-center gap-2">
            <span class="material-symbols-outlined text-lg">videocam</span>
            视频推流配置
          </h4>
          <div class="space-y-3">
            <div class="form-group">
              <label>MediaMTX 服务器地址</label>
              <input type="text" id="input-video-host" placeholder="192.168.31.14" />
            </div>
            <div class="form-group">
              <label>RTMP 推流地址</label>
              <input type="text" id="input-rtmp-url" placeholder="rtmp://192.168.31.14:1935/live/cam" />
            </div>
          </div>
        </div>
      </div>

      <!-- 底部按钮 -->
      <div class="settings-footer">
        <button id="save-btn" class="btn-primary">保存全部</button>
        <button id="test-btn" class="btn-secondary">测试 EMQX</button>
      </div>
      <div id="status-msg" class="connection-status hidden"></div>
    </div>
  </div>
</div>

<!-- 别名编辑面板 -->
<div id="alias-panel" class="settings-panel hidden">
  <div class="settings-card">
    <div class="settings-header">
      <h3>设备别名</h3>
      <button id="close-alias">
        <span class="material-symbols-outlined">close</span>
      </button>
    </div>
    <div class="settings-body">
      <div class="form-group">
        <label>设备序列号</label>
        <input type="text" id="alias-sn" readonly class="bg-gray-100" />
      </div>
      <div class="form-group">
        <label>别名</label>
        <input type="text" id="alias-input" placeholder="输入设备别名" />
      </div>
      <div class="settings-footer">
        <button id="alias-save-btn" class="btn-primary">保存</button>
        <button id="alias-clear-btn" class="btn-secondary">清除别名</button>
      </div>
    </div>
  </div>
</div>

<script type="module" is:inline>
  import { deviceManager } from '/src/lib/devices.js';
  import { deviceContext } from '/src/lib/state.js';
  import { mqttManager } from '/src/lib/mqtt.js';
  import tippy from '/node_modules/tippy.js/dist/tippy.esm.js';

  const deviceList = document.getElementById('device-list');
  const refreshBtn = document.getElementById('refresh-btn');
  const settingsBtn = document.getElementById('settings-btn');
  const settingsPanel = document.getElementById('settings-panel');
  const closeSettings = document.getElementById('close-settings');
  const saveBtn = document.getElementById('save-btn');
  const testBtn = document.getElementById('test-btn');
  const statusMsg = document.getElementById('status-msg');

  const inputHost = document.getElementById('input-host');
  const inputPort = document.getElementById('input-port');
  const inputKey = document.getElementById('input-key');
  const inputSecret = document.getElementById('input-secret');

  const inputMqttPort = document.getElementById('input-mqtt-port');
  const inputMqttUsername = document.getElementById('input-mqtt-username');
  const inputMqttPassword = document.getElementById('input-mqtt-password');

  const inputVideoHost = document.getElementById('input-video-host');
  const inputRtmpUrl = document.getElementById('input-rtmp-url');

  const aliasPanel = document.getElementById('alias-panel');
  const closeAlias = document.getElementById('close-alias');
  const aliasSn = document.getElementById('alias-sn');
  const aliasInput = document.getElementById('alias-input');
  const aliasSaveBtn = document.getElementById('alias-save-btn');
  const aliasClearBtn = document.getElementById('alias-clear-btn');

  // 别名管理 - 使用DeviceManager统一管理
  function getAlias(sn) {
    return deviceManager.getDeviceAlias(sn);
  }

  function setAlias(sn, alias) {
    deviceManager.setDeviceAlias(sn, alias);
  }

  // 渲染设备列表
  function render() {
    const devices = deviceManager.getDeviceList();
    const current = deviceContext.getCurrentDevice();

    if (devices.length === 0) {
      deviceList.innerHTML = '<div class="device-list-empty"><span class="material-symbols-outlined">search_off</span><span>未发现设备</span></div>';
      return;
    }

    // 按别名或SN进行字典顺序排序
    const sortedDevices = devices.sort((a, b) => {
      const aliasA = getAlias(a.sn) || a.sn;
      const aliasB = getAlias(b.sn) || b.sn;
      return aliasA.localeCompare(aliasB);
    });

    deviceList.innerHTML = sortedDevices.map(dev => {
      const alias = getAlias(dev.sn);
      const displayText = alias || dev.sn;
      const isOnline = (dev.status === 'online');

      // 获取MQTT连接状态 - 只判断是否已连接
      const mqttConnection = mqttManager.getConnection(dev.sn);
      const mqttClass = (mqttConnection && mqttConnection.isConnected) ? 'mqtt-connected' : '';

      return `
      <div class="device-item ${isOnline ? 'online' : 'offline'} ${dev.sn === current ? 'active' : ''} ${mqttClass}"
           data-sn="${dev.sn}">
        <div class="device-status-indicator">
          <div class="device-status-dot"></div>
          <button class="device-alias-btn" data-sn="${dev.sn}">···</button>
        </div>
        <span class="device-display" data-sn="${dev.sn}">${displayText}</span>
        ${!isOnline ? `
        <button class="device-remove-btn" data-sn="${dev.sn}">
          <span class="material-symbols-outlined">close</span>
        </button>
        ` : ''}
      </div>
    `}).join('');

    // 绑定 tippy tooltip
    deviceList.querySelectorAll('.device-display').forEach(el => {
      const sn = el.dataset.sn;
      const alias = getAlias(sn);

      if (alias) {
        tippy(el, {
          content: `<code style="font-family: Consolas, 'Courier New', Menlo, Monaco, monospace; font-size: 12px;">${sn}</code>`,
          allowHTML: true,
          placement: 'bottom',
          arrow: true,
          theme: 'light'
        });
      }
    });

    // 绑定点击事件 - 设备选择和MQTT连接创建
    deviceList.querySelectorAll('.device-item').forEach(el => {
      el.addEventListener('click', (e) => {
        if (e.target.closest('.device-remove-btn')) return;
        if (e.target.closest('.device-alias-btn')) return;

        const sn = el.dataset.sn;
        console.log('[DroneDeviceSwitcher]', '设备点击:', sn);

        // 设置当前设备
        deviceContext.setCurrentDevice(sn);

        // 确保MQTT连接 - 使用现有接口
        mqttManager.ensureConnection(sn).then(connection => {
          if (connection) {
            console.log('[DroneDeviceSwitcher]', 'MQTT连接已建立:', `station-${sn}`);
            // 重新渲染以更新蓝色指示灯
            render();
          }
        });
      });
    });

    // 绑定删除按钮 - 针对离线设备
    deviceList.querySelectorAll('.device-remove-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const sn = btn.dataset.sn;

        if (confirm(`删除离线设备 ${sn}?`)) {
          console.log('[DroneDeviceSwitcher]', '移除离线设备:', sn);

          // 断开MQTT连接
          mqttManager.disconnectDevice(sn);

          // 从设备管理器中移除
          deviceManager.removeDevice(sn);

          // 如果当前设备被移除，切换到第一个在线设备
          if (deviceContext.getCurrentDevice() === sn) {
            const onlineDevices = deviceManager.getOnlineDevices();
            if (onlineDevices.length > 0) {
              deviceContext.setCurrentDevice(onlineDevices[0].sn);
            } else {
              deviceContext.setCurrentDevice(null);
            }
          }

          render();
        }
      });
    });

    // 绑定别名按钮 - 打开别名面板
    deviceList.querySelectorAll('.device-alias-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const sn = btn.dataset.sn;
        const alias = getAlias(sn);

        aliasSn.value = sn;
        aliasInput.value = alias || '';
        aliasPanel.classList.remove('hidden');
      });
    });
  }

  // 加载配置
  function loadConfig() {
    // EMQX 配置（服务器地址共用）
    const host = localStorage.getItem('emqx_host') || '127.0.0.1';
    inputHost.value = host;
    inputPort.value = localStorage.getItem('emqx_port') || '18083';
    inputKey.value = localStorage.getItem('emqx_api_key') || '29275299af4a3366';
    inputSecret.value = localStorage.getItem('emqx_secret_key') || '0WrSJ49ADbOnNIa439CyYGWOUBKnhPhejSPFCqdRR9AcvE';

    // MQTT Broker 配置（使用同一服务器地址）
    inputMqttPort.value = localStorage.getItem('mqtt_broker_port') || '8083';
    inputMqttUsername.value = localStorage.getItem('mqtt_broker_username') || 'admin';
    inputMqttPassword.value = localStorage.getItem('mqtt_broker_password') || 'public';

    // 视频配置
    inputVideoHost.value = localStorage.getItem('video_host') || '127.0.0.1';
    inputRtmpUrl.value = localStorage.getItem('video_rtmp_url') || 'rtmp://127.0.0.1:1935/live/cam';
  }

  // 保存配置
  function save() {
    // 保存 EMQX 配置（服务器地址共用）
    const host = inputHost.value;
    const config = {
      host,
      port: inputPort.value,
      apiKey: inputKey.value,
      secretKey: inputSecret.value
    };

    // 保存到localStorage以便下次自动补全
    localStorage.setItem('emqx_host', config.host);
    localStorage.setItem('emqx_port', config.port);
    localStorage.setItem('emqx_api_key', config.apiKey);
    localStorage.setItem('emqx_secret_key', config.secretKey);

    // 更新deviceManager配置
    deviceManager.updateEmqxConfig(config);

    // 保存 MQTT Broker 配置（使用同一服务器地址）
    const mqttConfig = {
      host,  // 使用同一服务器地址
      port: inputMqttPort.value,
      username: inputMqttUsername.value,
      password: inputMqttPassword.value
    };

    // 保存到localStorage以便下次自动补全
    localStorage.setItem('mqtt_broker_host', mqttConfig.host);
    localStorage.setItem('mqtt_broker_port', mqttConfig.port);
    localStorage.setItem('mqtt_broker_username', mqttConfig.username);
    localStorage.setItem('mqtt_broker_password', mqttConfig.password);

    // 更新MQTT管理器配置
    mqttManager.updateConfig(mqttConfig);

    // 保存视频配置
    localStorage.setItem('video_host', inputVideoHost.value);
    localStorage.setItem('video_rtmp_url', inputRtmpUrl.value);

    // 触发视频配置更新事件
    window.dispatchEvent(new CustomEvent('video-config-updated', {
      detail: {
        host: inputVideoHost.value,
        rtmpUrl: inputRtmpUrl.value
      }
    }));

    showStatus('保存成功', 'success');

    setTimeout(() => {
      deviceManager.scan();
      settingsPanel.classList.add('hidden');
    }, 1000);
  }

  // 测试连接
  async function test() {
    testBtn.disabled = true;
    testBtn.textContent = '测试中...';

    const config = {
      host: inputHost.value,
      port: inputPort.value,
      apiKey: inputKey.value,
      secretKey: inputSecret.value
    };

    // 直接更新配置，无需保存
    deviceManager.updateEmqxConfig(config);

    try {
      await deviceManager.scan();
      const devices = deviceManager.getDeviceList();
      showStatus(`成功！发现 ${devices.length} 个设备`, 'success');
    } catch (err) {
      showStatus(`失败: ${err.message}`, 'error');
    } finally {
      testBtn.disabled = false;
      testBtn.textContent = '测试';
    }
  }

  // 显示状态
  function showStatus(msg, type) {
    statusMsg.textContent = msg;
    statusMsg.className = `connection-status ${type}`;
    statusMsg.classList.remove('hidden');
    setTimeout(() => statusMsg.classList.add('hidden'), 3000);
  }

  // 监听设备变化
  deviceManager.addListener((eventType, data) => {
    try {
      console.log('[DroneDeviceSwitcher]', 'DeviceManager事件:', eventType, data);
      if (eventType === 'devices-updated' || eventType === 'device-alias-changed') {
        render();
      }
    } catch (error) {
      console.error('[DroneDeviceSwitcher]', 'DeviceManager事件处理错误:', error);
    }
  });
  deviceContext.addListener((eventType, data) => {
    try {
      console.log('[DroneDeviceSwitcher]', 'DeviceContext事件:', eventType, data);
      if (eventType === 'device-changed') {
        render();
      }
    } catch (error) {
      console.error('[DroneDeviceSwitcher]', 'DeviceContext事件处理错误:', error);
    }
  });

  // 监听MQTT连接状态变化
  window.addEventListener('mqtt-connection-changed', (event) => {
    console.log('[DroneDeviceSwitcher]', 'MQTT连接状态变化:', event.detail);
    render(); // 重新渲染以更新指示灯颜色
  });

  // 事件绑定
  refreshBtn.addEventListener('click', () => {
    refreshBtn.classList.add('refreshing');
    deviceManager.scan().then(() => {
      setTimeout(() => refreshBtn.classList.remove('refreshing'), 500);
    });
  });

  settingsBtn.addEventListener('click', () => {
    loadConfig();
    settingsPanel.classList.remove('hidden');
  });

  closeSettings.addEventListener('click', () => {
    settingsPanel.classList.add('hidden');
  });

  saveBtn.addEventListener('click', save);
  testBtn.addEventListener('click', test);

  settingsPanel.addEventListener('click', (e) => {
    if (e.target === settingsPanel) {
      settingsPanel.classList.add('hidden');
    }
  });

  // 别名面板事件
  closeAlias.addEventListener('click', () => {
    aliasPanel.classList.add('hidden');
  });

  aliasSaveBtn.addEventListener('click', () => {
    const sn = aliasSn.value;
    const alias = aliasInput.value.trim();

    setAlias(sn, alias);
    aliasPanel.classList.add('hidden');
  });

  aliasClearBtn.addEventListener('click', () => {
    const sn = aliasSn.value;
    setAlias(sn, '');
    aliasPanel.classList.add('hidden');
  });

  aliasPanel.addEventListener('click', (e) => {
    if (e.target === aliasPanel) {
      aliasPanel.classList.add('hidden');
    }
  });

  // 设备列表横向滚动支持
  function setupHorizontalScroll() {
    deviceList.addEventListener('wheel', (e) => {
      // 阻止默认的垂直滚动
      e.preventDefault();

      // 水平滚动
      const scrollAmount = e.deltaY * 2; // 调整滚动速度
      deviceList.scrollLeft += scrollAmount;
    }, { passive: false });
  }

  // 初始化
  loadConfig();
  setupHorizontalScroll();

  // 将localStorage中的EMQX配置加载到deviceManager
  const emqxConfig = {
    host: localStorage.getItem('emqx_host') || '127.0.0.1',
    port: localStorage.getItem('emqx_port') || '18083',
    apiKey: localStorage.getItem('emqx_api_key') || '29275299af4a3366',
    secretKey: localStorage.getItem('emqx_secret_key') || '0WrSJ49ADbOnNIa439CyYGWOUBKnhPhejSPFCqdRR9AcvE'
  };
  deviceManager.updateEmqxConfig(emqxConfig);

  // 更新MQTT配置
  const mqttConfig = {
    host: localStorage.getItem('mqtt_broker_host') || '127.0.0.1',
    port: parseInt(localStorage.getItem('mqtt_broker_port')) || 8083,
    username: localStorage.getItem('mqtt_broker_username') || '',
    password: localStorage.getItem('mqtt_broker_password') || ''
  };
  mqttManager.updateBrokerConfig(mqttConfig);

  render();
  deviceManager.startScanning();

  // 为当前设备建立MQTT连接（如果有的话）
  const currentDevice = deviceContext.getCurrentDevice();
  if (currentDevice) {
    console.log('[DroneDeviceSwitcher]', '为当前设备建立MQTT连接:', currentDevice);
    mqttManager.ensureConnection(currentDevice).then(connection => {
      if (connection) {
        console.log('[DroneDeviceSwitcher]', '当前设备MQTT连接已建立:', `station-${currentDevice}`);
        render(); // 重新渲染以显示蓝色指示灯
      }
    });
  }

  // 清理 - 延迟1秒断开连接（刷新保护）
  window.addEventListener('beforeunload', () => {
    deviceManager.stopScanning();
    mqttManager.cleanup();
  });
</script>
