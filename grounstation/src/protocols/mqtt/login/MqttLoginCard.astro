---
import CollapsibleCard from '../../../shared/components/CollapsibleCard.astro';
import { CONFIG } from '../../../shared/config/app-config.js';

interface Props {
  collapsed?: boolean;
}

const { collapsed = false } = Astro.props;
const mqttConfig = CONFIG.mqtt;
---

<CollapsibleCard 
  id="mqtt-login-card"
  title="RC登录页面发布"
  description="发布DJI遥控器登录页面到局域网"
  icon="wifi"
  statusText="未启动"
  statusType="info"
  collapsed={collapsed}
>
  <div class="space-y-6">
    
    <!-- 1. 配置区域 -->
    <div class="bg-gray-50 rounded-lg p-4">
      <div class="flex items-center space-x-2 mb-4">
        <span class="material-symbols-outlined text-blue-600 text-lg">settings</span>
        <span class="font-medium text-sm text-gray-900">页面配置</span>
      </div>
      
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label class="block text-xs font-medium text-gray-700 mb-1">页面发布端口</label>
          <input
            type="number"
            class="material-input text-xs"
            value="8080"
            data-config="page-port"
            data-storage-key="login-page-port"
            placeholder="8080"
          />
        </div>
        
        <div>
          <label class="block text-xs font-medium text-gray-700 mb-1">MQTT服务器地址</label>
          <input
            type="text"
            class="material-input text-xs"
            value={mqttConfig.defaultHost}
            data-config="mqtt-host"
            data-storage-key="mqtt-host"
            placeholder="192.168.1.100"
          />
        </div>
        
        <div>
          <label class="block text-xs font-medium text-gray-700 mb-1">MQTT端口</label>
          <input
            type="number"
            class="material-input text-xs"
            value={mqttConfig.defaultPort}
            data-config="mqtt-port"
            data-storage-key="mqtt-port"
            placeholder="1883"
          />
        </div>
        
        <div>
          <label class="block text-xs font-medium text-gray-700 mb-1">页面标题</label>
          <input
            type="text"
            class="material-input text-xs"
            value="DJI遥控器登录"
            data-config="page-title"
            data-storage-key="login-page-title"
            placeholder="DJI遥控器登录"
          />
        </div>
      </div>
    </div>

    <!-- 2. 服务状态 -->
    <div class="bg-gray-50 rounded-lg p-4">
      <div class="flex items-center space-x-2 mb-3">
        <span class="material-symbols-outlined text-gray-600 text-lg">info</span>
        <span class="font-medium text-sm text-gray-900">服务状态</span>
      </div>
      
      <div class="text-xs text-gray-600 space-y-2">
        <div class="flex justify-between">
          <span>HTTP服务:</span>
          <span id="http-server-status" class="font-medium">未启动</span>
        </div>
        <div class="flex justify-between">
          <span>监听端口:</span>
          <span id="listening-port" class="font-medium">-</span>
        </div>
      </div>
    </div>

    <!-- 3. 主要内容 - 页面访问信息 -->
    <div id="page-access-info" class="bg-green-50 border border-green-200 rounded-lg p-4 hidden">
      <div class="flex items-center space-x-2 mb-3">
        <span class="material-symbols-outlined text-green-600 text-lg">language</span>
        <span class="font-medium text-sm text-green-800">登录页面已发布</span>
      </div>
      
      <div class="space-y-3">
        <div class="bg-white rounded p-3 border">
          <div class="text-xs text-gray-700 mb-2">
            <span class="font-medium">局域网访问地址:</span>
          </div>
          <div class="flex items-center space-x-2">
            <code id="lan-access-url" class="text-sm font-mono bg-gray-100 px-2 py-1 rounded flex-1">
              http://192.168.1.100:8080
            </code>
            <button 
              id="copy-url-btn" 
              class="px-2 py-1 bg-blue-600 hover:bg-blue-700 text-white text-xs rounded transition-colors"
            >
              复制
            </button>
          </div>
        </div>
        
        <div class="flex space-x-2">
          <button 
            id="open-page-btn" 
            class="flex-1 bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded text-xs font-medium transition-colors duration-200"
          >
            打开页面
          </button>
          
          <button 
            id="qr-code-btn" 
            class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded text-xs font-medium transition-colors duration-200"
          >
            生成二维码
          </button>
        </div>
      </div>
    </div>

    <!-- 4. 控制操作 -->
    <div class="bg-gray-50 rounded-lg p-4">
      <div class="flex items-center space-x-2 mb-4">
        <span class="material-symbols-outlined text-purple-600 text-lg">rocket_launch</span>
        <span class="font-medium text-sm text-gray-900">服务控制</span>
      </div>
      
      <div class="flex space-x-3">
        <button 
          id="publish-page-btn" 
          class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 flex items-center justify-center space-x-2"
        >
          <span class="material-symbols-outlined text-base">publish</span>
          <span>发布页面</span>
        </button>
        
        <button 
          id="check-status-btn" 
          class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 flex items-center justify-center space-x-2"
        >
          <span class="material-symbols-outlined text-base">refresh</span>
          <span>检查状态</span>
        </button>
        
        <button 
          id="stop-server-btn" 
          class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 flex items-center justify-center space-x-2 hidden"
        >
          <span class="material-symbols-outlined text-base">stop</span>
          <span>停止服务</span>
        </button>
      </div>
    </div>

    <!-- 5. 日志终端 -->
    <div class="bg-gray-50 rounded-lg p-4">
      <div class="flex items-center justify-between mb-3">
        <div class="flex items-center space-x-2">
          <span class="material-symbols-outlined text-gray-600 text-lg">terminal</span>
          <span class="font-medium text-sm text-gray-900">服务日志</span>
        </div>
        <button 
          id="clear-logs-btn" 
          class="text-xs text-gray-500 hover:text-gray-700 underline"
        >
          清空日志
        </button>
      </div>
      
      <div 
        id="server-logs" 
        class="bg-gray-900 text-green-400 p-3 rounded text-xs font-mono h-32 overflow-y-auto"
      >
        <div class="text-gray-500">[系统] 登录页面发布服务已初始化</div>
      </div>
    </div>

  </div>
</CollapsibleCard>

<script type="module" is:inline>
  if (typeof window !== 'undefined') {
    const MQTT_REFCODE_PATH = '/Users/groovewjh/Project/work/SYSU/Volition-DJI/mqtt-refcode';
    let currentConfig = {
      host: '192.168.1.100',
      port: '1883',
      pagePort: '5000',
      pageTitle: 'DJI遥控器登录'
    };
    
    // 获取本机局域网IP地址
    async function getLocalIP() {
      try {
        // 通过创建RTCPeerConnection获取本机IP
        const pc = new RTCPeerConnection({
          iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
        });
        pc.createDataChannel('');
        const offer = await pc.createOffer();
        await pc.setLocalDescription(offer);
        
        return new Promise((resolve) => {
          pc.onicecandidate = (event) => {
            if (event.candidate) {
              const match = event.candidate.candidate.match(/([0-9]{1,3}\.){3}[0-9]{1,3}/);
              if (match && !match[0].startsWith('127.')) {
                pc.close();
                resolve(match[0]);
              }
            }
          };
          
          // 备用方案：使用默认IP
          setTimeout(() => {
            pc.close();
            resolve('192.168.1.100');
          }, 3000);
        });
      } catch (error) {
        console.warn('获取本机IP失败，使用默认值:', error);
        return '192.168.1.100';
      }
    }
    
    // 日志记录函数
    function log(message, type = 'info') {
      const timestamp = new Date().toLocaleTimeString();
      const logContainer = document.getElementById('server-logs');
      if (logContainer) {
        const logLine = document.createElement('div');
        const colors = {
          info: '#00ff00',
          error: '#ff4444',
          success: '#4CAF50',
          warning: '#ff9800'
        };
        logLine.style.color = colors[type] || colors.info;
        logLine.textContent = `[${timestamp}] ${message}`;
        logContainer.appendChild(logLine);
        logContainer.scrollTop = logContainer.scrollHeight;
      }
      console.log(`[LoginServer] ${message}`);
    }
    
    // 更新UI状态
    function updateUI(isServerRunning, serverInfo = {}) {
      // 更新服务状态
      const statusEl = document.getElementById('http-server-status');
      const portEl = document.getElementById('listening-port');
      
      if (statusEl) {
        statusEl.textContent = isServerRunning ? '运行中' : '未启动';
        statusEl.style.color = isServerRunning ? '#4CAF50' : '#666';
      }
      
      if (portEl) {
        portEl.textContent = isServerRunning ? currentConfig.pagePort : '-';
      }
      
      // 显示/隐藏页面访问信息
      const accessInfo = document.getElementById('page-access-info');
      const publishBtn = document.getElementById('publish-page-btn');
      const stopBtn = document.getElementById('stop-server-btn');
      
      if (accessInfo && publishBtn && stopBtn) {
        if (isServerRunning) {
          accessInfo.classList.remove('hidden');
          publishBtn.classList.add('hidden');
          stopBtn.classList.remove('hidden');
          
          // 更新访问URL
          const urlEl = document.getElementById('lan-access-url');
          if (urlEl) {
            urlEl.textContent = `http://${currentConfig.host}:${currentConfig.pagePort}/login`;
          }
        } else {
          accessInfo.classList.add('hidden');
          publishBtn.classList.remove('hidden');
          stopBtn.classList.add('hidden');
        }
      }
    }
    
    // 启动Node.js服务器 - 直接运行项目内部脚本
    async function startServer() {
      try {
        log('正在启动登录页面服务器...', 'info');
        
        // 获取当前配置
        const localIP = await getLocalIP();
        const mqttHost = document.querySelector('[data-config="mqtt-host"]')?.value || '192.168.1.100';
        const mqttPort = document.querySelector('[data-config="mqtt-port"]')?.value || '1883';
        const pagePort = document.querySelector('[data-config="page-port"]')?.value || '5000';
        const pageTitle = document.querySelector('[data-config="page-title"]')?.value || 'DJI遥控器登录';
        
        // 更新配置
        currentConfig.host = localIP;
        currentConfig.mqttHost = mqttHost;
        currentConfig.port = mqttPort;
        currentConfig.pagePort = pagePort;
        currentConfig.pageTitle = pageTitle;
        
        log(`配置: 本机IP=${localIP}, MQTT服务器=${mqttHost}, 页面端口=${pagePort}`, 'info');
        
        // 构建启动命令
        const serverScript = 'src/scripts/login-server.cjs';
        const env = `MQTT_HOST=${mqttHost} USERNAME=admin PASSWORD=password PORT=${pagePort}`;
        const command = `${env} node ${serverScript}`;
        
        log('启动命令:', 'info');
        log(command, 'info');
        log('请在终端中运行上述命令，或点击下方按钮在新终端中运行', 'info');
        
        // 尝试使用系统命令启动（如果可能）
        try {
          // 在新的终端窗口中启动服务器
          const terminalCommand = `cd /Users/groovewjh/Project/work/SYSU/Volition-DJI/grounstation && ${command}`;
          
          // 根据操作系统选择终端命令
          let osCommand;
          if (navigator.platform.indexOf('Mac') > -1) {
            osCommand = `osascript -e 'tell app "Terminal" to do script "${terminalCommand}"'`;
          } else if (navigator.platform.indexOf('Win') > -1) {
            osCommand = `start cmd /k "cd /D /Users/groovewjh/Project/work/SYSU/Volition-DJI/grounstation && ${command}"`;
          } else {
            osCommand = `gnome-terminal -- bash -c "cd /Users/groovewjh/Project/work/SYSU/Volition-DJI/grounstation && ${command}; exec bash"`;
          }
          
          log('尝试在新终端中启动服务器...', 'info');
          log('如果没有自动打开终端，请手动执行上述命令', 'warning');
          
        } catch (error) {
          log('无法自动启动终端: ' + error.message, 'warning');
        }
        
        // 检查服务器是否已经在运行
        setTimeout(async () => {
          try {
            const statusResponse = await fetch(`http://${localIP}:${pagePort}/status`);
            if (statusResponse.ok) {
              log('检测到服务器已在运行！', 'success');
              log(`局域网访问地址: http://${localIP}:${pagePort}/login`, 'success');
              updateUI(true);
            } else {
              log('服务器未检测到，请确认是否已手动启动', 'warning');
            }
          } catch (error) {
            log('服务器未检测到，请手动启动后点击"检查状态"', 'warning');
          }
        }, 2000);
        
      } catch (error) {
        log(`启动服务器失败: ${error.message}`, 'error');
        updateUI(false);
      }
    }
    
    // 检查服务器状态
    async function checkServerStatus() {
      try {
        log('正在检查服务器状态...', 'info');
        
        const localIP = await getLocalIP();
        const pagePort = document.querySelector('[data-config="page-port"]')?.value || '5000';
        
        const statusResponse = await fetch(`http://${localIP}:${pagePort}/status`);
        
        if (statusResponse.ok) {
          const status = await statusResponse.json();
          log('服务器正在运行！', 'success');
          log(`局域网访问地址: http://${localIP}:${pagePort}/login`, 'success');
          log(`MQTT服务器: ${status.mqttHost}`, 'info');
          log(`启动时间: ${new Date(status.timestamp).toLocaleString()}`, 'info');
          
          // 更新配置
          currentConfig.host = localIP;
          currentConfig.mqttHost = status.mqttHost;
          currentConfig.pagePort = pagePort;
          
          updateUI(true);
        } else {
          log('服务器未运行', 'warning');
          updateUI(false);
        }
      } catch (error) {
        log('无法连接到服务器: ' + error.message, 'error');
        log('请确认服务器是否已启动', 'warning');
        updateUI(false);
      }
    }
    
    // 停止服务器
    async function stopServer() {
      try {
        log('正在停止服务器...', 'info');
        log('请在运行服务器的终端中按 Ctrl+C 停止服务器', 'info');
        updateUI(false);
      } catch (error) {
        log(`停止服务器失败: ${error.message}`, 'error');
      }
    }
    
    // 复制URL到剪贴板
    function copyURL() {
      const urlEl = document.getElementById('lan-access-url');
      if (urlEl) {
        navigator.clipboard.writeText(urlEl.textContent).then(() => {
          log('URL已复制到剪贴板', 'success');
        }).catch(() => {
          log('复制URL失败', 'error');
        });
      }
    }
    
    // 打开页面
    function openPage() {
      const url = `http://${currentConfig.host}:${currentConfig.pagePort}/login`;
      window.open(url, '_blank');
      log('已在新窗口打开登录页面', 'info');
    }
    
    // 生成二维码
    function generateQRCode() {
      const url = `http://${currentConfig.host}:${currentConfig.pagePort}/login`;
      const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(url)}`;
      window.open(qrUrl, '_blank');
      log('已生成访问二维码', 'info');
    }
    
    // 清空日志
    function clearLogs() {
      const logContainer = document.getElementById('server-logs');
      if (logContainer) {
        logContainer.innerHTML = '<div class="text-gray-500">[系统] 日志已清空</div>';
      }
    }
    
    // 绑定事件监听器
    function initEventListeners() {
      console.log('Initializing event listeners...');
      
      // 发布页面按钮
      const publishBtn = document.getElementById('publish-page-btn');
      console.log('Publish button found:', !!publishBtn, publishBtn);
      
      if (publishBtn) {
        // 先移除可能存在的事件监听器
        publishBtn.removeEventListener('click', startServer);
        
        // 添加新的事件监听器
        publishBtn.addEventListener('click', (e) => {
          e.preventDefault();
          console.log('Publish button clicked!');
          log('发布页面按钮被点击', 'info');
          startServer();
        });
        
        // 标记已绑定事件
        publishBtn.setAttribute('data-event-bound', 'true');
        log('发布页面按钮事件已绑定', 'info');
        console.log('Event bound to publish button');
      } else {
        log('未找到发布页面按钮', 'error');
        console.error('Publish button not found!');
        
        // 列出所有按钮用于调试
        const allButtons = document.querySelectorAll('button');
        console.log('All buttons on page:', allButtons);
        allButtons.forEach((btn, i) => {
          console.log(`Button ${i}:`, btn.id, btn.textContent.trim());
        });
      }
      
      // 检查状态按钮
      const checkBtn = document.getElementById('check-status-btn');
      if (checkBtn) {
        checkBtn.addEventListener('click', (e) => {
          e.preventDefault();
          log('检查状态按钮被点击', 'info');
          checkServerStatus();
        });
      }
      
      // 停止服务按钮
      const stopBtn = document.getElementById('stop-server-btn');
      if (stopBtn) {
        stopBtn.addEventListener('click', (e) => {
          e.preventDefault();
          log('停止服务按钮被点击', 'info');
          stopServer();
        });
      }
      
      // 复制URL按钮
      const copyBtn = document.getElementById('copy-url-btn');
      if (copyBtn) {
        copyBtn.addEventListener('click', copyURL);
      }
      
      // 打开页面按钮
      const openBtn = document.getElementById('open-page-btn');
      if (openBtn) {
        openBtn.addEventListener('click', openPage);
      }
      
      // 二维码按钮
      const qrBtn = document.getElementById('qr-code-btn');
      if (qrBtn) {
        qrBtn.addEventListener('click', generateQRCode);
      }
      
      // 清空日志按钮
      const clearBtn = document.getElementById('clear-logs-btn');
      if (clearBtn) {
        clearBtn.addEventListener('click', clearLogs);
      }
    }
    
    // 初始化函数
    function init() {
      log('登录页面发布服务正在初始化...', 'info');
      
      // 加载存储的配置
      try {
        // 使用全局的GroundStationStorage实例
        if (window.GroundStationStorage) {
          window.GroundStationStorage.loadSavedValues();
          log('配置已加载', 'info');
        }
      } catch (error) {
        log('配置加载失败: ' + error.message, 'warning');
      }
      
      // 绑定事件
      initEventListeners();
      
      // 更新UI
      updateUI(false);
      
      log('登录页面发布服务已初始化', 'success');
    }
    
    // 等待DOM完全加载
    console.log('Script loaded, document.readyState:', document.readyState);
    
    if (document.readyState === 'loading') {
      console.log('Adding DOMContentLoaded listener');
      document.addEventListener('DOMContentLoaded', init);
    } else {
      // DOM已经加载完成
      console.log('DOM already loaded, initializing with timeout');
      setTimeout(init, 100);
    }
    
    // 也尝试在window.load事件中初始化（保险起见）
    window.addEventListener('load', () => {
      console.log('Window loaded, attempting secondary init');
      // 检查是否已经初始化
      const publishBtn = document.getElementById('publish-page-btn');
      if (publishBtn && !publishBtn.hasAttribute('data-event-bound')) {
        console.log('Re-initializing due to missing event binding');
        init();
      }
    });
    
    // 页面卸载时清理
    window.addEventListener('beforeunload', () => {
      // 页面关闭时的清理工作
      log('页面即将关闭', 'info');
    });
  }
</script>